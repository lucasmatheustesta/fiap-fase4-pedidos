name: 🔍 PR Quality Check

on:
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  PYTHON_VERSION: '3.11'
  MINIMUM_COVERAGE: 70

jobs:
  # Job obrigatório: Verificação de Qualidade
  quality-gate:
    name: 🚪 Quality Gate
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    
    steps:
    - name: 📥 Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html coverage
        pip install flake8 black isort bandit safety
    
    - name: 🧪 Run tests with coverage
      id: tests
      run: |
        echo "🧪 Running unit tests..."
        python -m pytest tests/unit/ \
          --cov=src \
          --cov-report=xml:coverage.xml \
          --cov-report=term-missing \
          --cov-report=html:htmlcov \
          --junitxml=test-results.xml \
          --html=test-report.html \
          --self-contained-html \
          -v
        
        echo "✅ Tests completed"
    
    - name: 📊 Extract coverage percentage
      id: coverage
      run: |
        COVERAGE=$(python -c "
        import xml.etree.ElementTree as ET
        try:
            tree = ET.parse('coverage.xml')
            root = tree.getroot()
            coverage = float(root.attrib['line-rate']) * 100
            print(f'{coverage:.1f}')
        except Exception as e:
            print('0.0')
        ")
        
        echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "📊 Coverage: $COVERAGE%"
        
        if (( $(echo "$COVERAGE >= $MINIMUM_COVERAGE" | bc -l) )); then
          echo "✅ Coverage meets minimum requirement ($MINIMUM_COVERAGE%)"
          echo "coverage-status=✅ PASSED" >> $GITHUB_OUTPUT
        else
          echo "❌ Coverage below minimum requirement ($MINIMUM_COVERAGE%)"
          echo "coverage-status=❌ FAILED" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: 🎨 Code formatting check
      id: formatting
      run: |
        echo "🎨 Checking code formatting..."
        
        # Check Black formatting
        if black --check --diff src/ tests/; then
          echo "✅ Code formatting is correct"
          echo "formatting-status=✅ PASSED" >> $GITHUB_OUTPUT
        else
          echo "❌ Code formatting issues found"
          echo "formatting-status=❌ FAILED" >> $GITHUB_OUTPUT
          echo "Run 'black src/ tests/' to fix formatting"
        fi
    
    - name: 🔍 Linting check
      id: linting
      run: |
        echo "🔍 Running linting checks..."
        
        # Flake8 linting
        if flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503; then
          echo "✅ Linting passed"
          echo "linting-status=✅ PASSED" >> $GITHUB_OUTPUT
        else
          echo "❌ Linting issues found"
          echo "linting-status=❌ FAILED" >> $GITHUB_OUTPUT
        fi
    
    - name: 🔒 Security check
      id: security
      run: |
        echo "🔒 Running security checks..."
        
        # Bandit security check
        bandit -r src/ -f json -o bandit-report.json || true
        
        # Safety check for dependencies
        safety check || true
        
        echo "security-status=✅ COMPLETED" >> $GITHUB_OUTPUT
        echo "✅ Security scan completed"
    
    - name: 📊 Quality summary
      id: quality-check
      run: |
        echo "## 📊 Quality Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🧪 Tests | ✅ PASSED | All unit tests passed |" >> $GITHUB_STEP_SUMMARY
        echo "| 📊 Coverage | ${{ steps.coverage.outputs.coverage-status }} | ${{ steps.coverage.outputs.percentage }}% (min: ${{ env.MINIMUM_COVERAGE }}%) |" >> $GITHUB_STEP_SUMMARY
        echo "| 🎨 Formatting | ${{ steps.formatting.outputs.formatting-status }} | Black code formatting |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Linting | ${{ steps.linting.outputs.linting-status }} | Flake8 linting |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔒 Security | ${{ steps.security.outputs.security-status }} | Bandit + Safety |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Verificar se todos os checks passaram
        COVERAGE_OK=$(echo "${{ steps.coverage.outputs.percentage }} >= $MINIMUM_COVERAGE" | bc -l)
        
        if [[ "$COVERAGE_OK" == "1" ]]; then
          echo "✅ All quality checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Quality checks failed!" >> $GITHUB_STEP_SUMMARY
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: 📤 Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-quality-reports
        path: |
          coverage.xml
          htmlcov/
          test-results.xml
          test-report.html
          bandit-report.json
        retention-days: 30

  # Job: Comentário no PR
  pr-comment:
    name: 💬 PR Comment
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always()
    
    steps:
    - name: 💬 Comment PR - Success
      if: needs.quality-gate.result == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ needs.quality-gate.outputs.coverage-percentage }}';
          const comment = `## ✅ Quality Check Passed!
          
          🎉 **All quality gates passed successfully!**
          
          ### 📊 Results Summary:
          - ✅ **Tests**: All unit tests passed
          - ✅ **Coverage**: ${coverage}% (minimum: ${{ env.MINIMUM_COVERAGE }}%)
          - ✅ **Code Quality**: All checks passed
          - ✅ **Security**: No critical issues found
          
          ### 🚀 Ready to merge!
          This PR meets all quality requirements and can be safely merged.
          
          ---
          *Automated quality check by GitHub Actions*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: 💬 Comment PR - Failure
      if: needs.quality-gate.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = '${{ needs.quality-gate.outputs.coverage-percentage }}' || '0.0';
          const comment = `## ❌ Quality Check Failed!
          
          🚫 **This PR does not meet the quality requirements.**
          
          ### 📊 Results Summary:
          - 📊 **Coverage**: ${coverage}% (minimum required: ${{ env.MINIMUM_COVERAGE }}%)
          - ❌ **Quality Gates**: One or more checks failed
          
          ### 🔧 Actions Required:
          1. **Increase test coverage** to at least ${{ env.MINIMUM_COVERAGE }}%
          2. **Fix code quality issues** (check the Actions logs)
          3. **Address security concerns** if any
          4. **Fix formatting issues** by running \`black src/ tests/\`
          
          ### 📋 How to fix:
          \`\`\`bash
          # Run tests locally
          python -m pytest tests/unit/ --cov=src --cov-report=term-missing
          
          # Fix formatting
          black src/ tests/
          isort src/ tests/
          
          # Check linting
          flake8 src/ tests/
          \`\`\`
          
          ---
          *This PR will be blocked until all quality requirements are met.*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Job: Status Check (obrigatório para merge)
  status-check:
    name: ✅ Status Check
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always()
    
    steps:
    - name: ✅ Set success status
      if: needs.quality-gate.result == 'success'
      run: |
        echo "✅ All quality checks passed!"
        echo "PR is ready for review and merge."
    
    - name: ❌ Set failure status
      if: needs.quality-gate.result == 'failure'
      run: |
        echo "❌ Quality checks failed!"
        echo "PR cannot be merged until issues are resolved."
        exit 1

