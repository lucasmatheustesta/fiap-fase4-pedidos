name: üöÄ Deploy to AWS

on:
  push:
    branches: [ main, master ]
  workflow_run:
    workflows: ["üîç PR Quality Check"]
    types:
      - completed
    branches: [ main, master ]

# Permiss√µes necess√°rias
permissions:
  contents: read
  actions: read
  checks: read

env:
  AWS_REGION: us-east-1
  APP_RUNNER_SERVICE_NAME: pedidos-microservice

jobs:
  # Job: Verificar se deve fazer deploy
  check-deploy:
    name: üîç Check Deploy Conditions
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      quality-passed: ${{ steps.quality.outputs.passed }}
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üîç Check quality gate
        id: quality
        run: |
          # Se foi triggered por workflow_run, verificar se passou
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "‚úÖ Quality gate passed"
              echo "passed=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Quality gate failed"
              echo "passed=false" >> $GITHUB_OUTPUT
            fi
          else
            # Push direto na main (assumir que passou)
            echo "üîÑ Direct push to main, assuming quality passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: üéØ Determine if should deploy
        id: check
        run: |
          QUALITY_PASSED="${{ steps.quality.outputs.passed }}"
          
          if [ "$QUALITY_PASSED" = "true" ]; then
            echo "‚úÖ All conditions met for deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Conditions not met for deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
          
          echo "üìä Deploy decision: ${{ steps.check.outputs.should-deploy }}"

  # Job: Verificar secrets AWS
  check-secrets:
    name: üîç Check AWS Secrets
    runs-on: ubuntu-latest
    needs: check-deploy
    if: needs.check-deploy.outputs.should-deploy == 'true'
    
    outputs:
      secrets-configured: ${{ steps.verify.outputs.configured }}
    
    steps:
      - name: üîç Verify AWS secrets are configured
        id: verify
        run: |
          echo "üîç Checking AWS secrets configuration..."
          
          if [ -z "$AWS_ACCESS_KEY_ID" ]; then
            echo "‚ùå AWS_ACCESS_KEY_ID secret not configured"
            echo "üí° Please add AWS_ACCESS_KEY_ID to GitHub repository secrets"
            echo "üîó Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "configured=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
            echo "‚ùå AWS_SECRET_ACCESS_KEY secret not configured"
            echo "üí° Please add AWS_SECRET_ACCESS_KEY to GitHub repository secrets"
            echo "configured=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          if [ -z "$AWS_ACCOUNT_ID" ]; then
            echo "‚ùå AWS_ACCOUNT_ID secret not configured"
            echo "üí° Please add AWS_ACCOUNT_ID to GitHub repository secrets"
            echo "configured=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ All AWS secrets are configured"
          echo "configured=true" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

  # Job: Build e Deploy
  deploy:
    name: üöÄ Deploy to AWS App Runner
    runs-on: ubuntu-latest
    needs: [check-deploy, check-secrets]
    if: needs.check-deploy.outputs.should-deploy == 'true' && needs.check-secrets.outputs.secrets-configured == 'true'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: üß™ Run quick tests before deploy
        run: |
          echo "üß™ Running quick smoke tests before deployment..."
          
          # Verificar se a aplica√ß√£o inicia
          timeout 10s python src/main.py &
          sleep 3
          
          # Testar endpoint b√°sico
          if curl -f http://localhost:5000/api/health 2>/dev/null; then
            echo "‚úÖ Application starts and health check passes"
          else
            echo "‚ö†Ô∏è Health check warning, but continuing deployment"
          fi
          
          # Parar aplica√ß√£o
          pkill -f "python src/main.py" || true
      
      - name: üîß Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: üèóÔ∏è Create or Update App Runner Service
        run: |
          echo "üèóÔ∏è Deploying to AWS App Runner..."
          
          # Verificar se o servi√ßo j√° existe
          SERVICE_ARN="arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}"
          
          if aws apprunner describe-service --service-arn "$SERVICE_ARN" 2>/dev/null; then
            echo "üîÑ Service exists, updating..."
            
            # Atualizar servi√ßo existente
            aws apprunner start-deployment --service-arn "$SERVICE_ARN"
            
            echo "deployment-type=update" >> $GITHUB_ENV
          else
            echo "üÜï Service doesn't exist, creating new service..."
            
            # Criar arquivo de configura√ß√£o
            cat > service-config.json << EOF
          {
            "ServiceName": "${{ env.APP_RUNNER_SERVICE_NAME }}",
            "SourceConfiguration": {
              "AutoDeploymentsEnabled": true,
              "CodeRepository": {
                "RepositoryUrl": "${{ github.server_url }}/${{ github.repository }}",
                "SourceCodeVersion": {
                  "Type": "BRANCH",
                  "Value": "main"
                },
                "CodeConfiguration": {
                  "ConfigurationSource": "REPOSITORY"
                }
              }
            },
            "InstanceConfiguration": {
              "Cpu": "0.25 vCPU",
              "Memory": "0.5 GB"
            }
          }
          EOF
            
            # Criar servi√ßo
            aws apprunner create-service --cli-input-json file://service-config.json
            
            echo "deployment-type=create" >> $GITHUB_ENV
          fi
      
      - name: ‚è≥ Wait for deployment
        run: |
          echo "‚è≥ Waiting for deployment to complete..."
          
          SERVICE_ARN="arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}"
          
          # Aguardar at√© o servi√ßo estar rodando
          for i in {1..20}; do
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query 'Service.Status' --output text 2>/dev/null || echo "UNKNOWN")
            echo "üîÑ Deployment status: $STATUS (attempt $i/20)"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "‚úÖ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "CREATE_FAILED" ] || [ "$STATUS" = "UPDATE_FAILED" ]; then
              echo "‚ùå Deployment failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
          done
          
          if [ "$STATUS" != "RUNNING" ]; then
            echo "‚è∞ Deployment timeout - status: $STATUS"
            echo "üîç Check AWS Console for details"
            exit 1
          fi
      
      - name: üåê Get service URL
        id: url
        run: |
          SERVICE_ARN="arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}"
          
          SERVICE_URL=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query 'Service.ServiceUrl' --output text 2>/dev/null || echo "")
          
          if [ -n "$SERVICE_URL" ]; then
            echo "üåê Service URL: https://$SERVICE_URL"
            echo "url=https://$SERVICE_URL" >> $GITHUB_OUTPUT
            echo "SERVICE_URL=https://$SERVICE_URL" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è Could not retrieve service URL"
            echo "SERVICE_URL=unknown" >> $GITHUB_ENV
          fi
      
      - name: üß™ Test deployed application
        run: |
          echo "üß™ Testing deployed application..."
          
          if [ "$SERVICE_URL" != "unknown" ] && [ -n "$SERVICE_URL" ]; then
            # Aguardar um pouco para o servi√ßo estar totalmente dispon√≠vel
            sleep 30
            
            # Testar health check
            if curl -f "$SERVICE_URL/api/health" --max-time 30 2>/dev/null; then
              echo "‚úÖ Health check passed!"
            else
              echo "‚ö†Ô∏è Health check failed, but deployment completed"
            fi
            
            # Testar endpoint de info
            if curl -f "$SERVICE_URL/api/info" --max-time 30 2>/dev/null; then
              echo "‚úÖ Info endpoint working!"
            else
              echo "‚ö†Ô∏è Info endpoint issue, but deployment completed"
            fi
          else
            echo "‚ö†Ô∏è Skipping tests - service URL not available"
          fi
      
      - name: üìä Deployment summary
        run: |
          echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| üåê **Service URL** | ${{ env.SERVICE_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîß **Service Name** | ${{ env.APP_RUNNER_SERVICE_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üåç **AWS Region** | ${{ env.AWS_REGION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üìÖ **Deployed At** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| üîÑ **Deployment Type** | ${{ env.deployment-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üéâ **Your microservice is now live!**" >> $GITHUB_STEP_SUMMARY

  # Job: Notificar resultado
  notify:
    name: üì¢ Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [check-deploy, check-secrets, deploy]
    if: always()
    
    steps:
      - name: üì¢ Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üåê Service is now available at the provided URL"
          echo "üìä Check the deployment summary for details"
      
      - name: üì¢ Secrets Missing
        if: needs.check-secrets.outputs.secrets-configured == 'false'
        run: |
          echo "‚ùå Deployment failed: AWS secrets not configured"
          echo "üîç Please configure the following secrets in GitHub:"
          echo "   - AWS_ACCESS_KEY_ID"
          echo "   - AWS_SECRET_ACCESS_KEY"
          echo "   - AWS_ACCOUNT_ID"
          echo "üîó Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
          exit 1
      
      - name: üì¢ Deployment Skipped
        if: needs.check-deploy.outputs.should-deploy == 'false'
        run: |
          echo "‚è≠Ô∏è Deployment skipped"
          echo "üîç Reason: Quality gate did not pass or conditions not met"
          echo "üí° Ensure your PR passes all quality checks before merging"
      
      - name: üì¢ Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå Deployment failed"
          echo "üîç Check the deployment logs for details"
          echo "üí° Common issues: AWS credentials, service configuration, or application errors"
          exit 1

