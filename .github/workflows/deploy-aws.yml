name: 🚀 Deploy to AWS

on:
  push:
    branches: [ main, master ]
  workflow_run:
    workflows: ["🔍 PR Quality Check"]
    types:
      - completed
    branches: [ main, master ]

# Permissões necessárias
permissions:
  contents: read
  actions: read
  checks: read

env:
  AWS_REGION: us-east-1
  APP_RUNNER_SERVICE_NAME: pedidos-microservice

jobs:
  # Job: Verificar se deve fazer deploy
  check-deploy:
    name: 🔍 Check Deploy Conditions
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      quality-passed: ${{ steps.quality.outputs.passed }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🔍 Check quality gate
        id: quality
        run: |
          # Se foi triggered por workflow_run, verificar se passou
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            if [ "${{ github.event.workflow_run.conclusion }}" = "success" ]; then
              echo "✅ Quality gate passed"
              echo "passed=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Quality gate failed"
              echo "passed=false" >> $GITHUB_OUTPUT
            fi
          else
            # Push direto na main (assumir que passou)
            echo "🔄 Direct push to main, assuming quality passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: 🎯 Determine if should deploy
        id: check
        run: |
          QUALITY_PASSED="${{ steps.quality.outputs.passed }}"
          
          if [ "$QUALITY_PASSED" = "true" ]; then
            echo "✅ All conditions met for deployment"
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Conditions not met for deployment"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi
          
          echo "📊 Deploy decision: ${{ steps.check.outputs.should-deploy }}"

  # Job: Build e Deploy
  deploy:
    name: 🚀 Deploy to AWS App Runner
    runs-on: ubuntu-latest
    needs: check-deploy
    if: needs.check-deploy.outputs.should-deploy == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: 🧪 Run quick tests before deploy
        run: |
          echo "🧪 Running quick smoke tests before deployment..."
          
          # Verificar se a aplicação inicia
          timeout 10s python src/main.py &
          sleep 3
          
          # Testar endpoint básico
          if curl -f http://localhost:5000/api/health 2>/dev/null; then
            echo "✅ Application starts and health check passes"
          else
            echo "⚠️ Health check warning, but continuing deployment"
          fi
          
          # Parar aplicação
          pkill -f "python src/main.py" || true
      
      - name: 🔧 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: 🏗️ Create or Update App Runner Service
        run: |
          echo "🏗️ Deploying to AWS App Runner..."
          
          # Verificar se o serviço já existe
          if aws apprunner describe-service --service-arn "arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}" 2>/dev/null; then
            echo "🔄 Service exists, updating..."
            
            # Atualizar serviço existente
            aws apprunner start-deployment \
              --service-arn "arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}"
            
            echo "deployment-type=update" >> $GITHUB_ENV
          else
            echo "🆕 Service doesn't exist, creating new service..."
            
            # Criar novo serviço
            cat > apprunner-config.json << 'EOF'
          {
            "ServiceName": "${{ env.APP_RUNNER_SERVICE_NAME }}",
            "SourceConfiguration": {
              "AutoDeploymentsEnabled": true,
              "CodeRepository": {
                "RepositoryUrl": "${{ github.server_url }}/${{ github.repository }}",
                "SourceCodeVersion": {
                  "Type": "BRANCH",
                  "Value": "main"
                },
                "CodeConfiguration": {
                  "ConfigurationSource": "REPOSITORY",
                  "CodeConfigurationValues": {
                    "Runtime": "PYTHON_3",
                    "BuildCommand": "pip install -r requirements.txt",
                    "StartCommand": "python src/main.py",
                    "RuntimeEnvironmentVariables": {
                      "FLASK_ENV": "production",
                      "PORT": "5000"
                    }
                  }
                }
              }
            },
            "InstanceConfiguration": {
              "Cpu": "0.25 vCPU",
              "Memory": "0.5 GB"
            }
          }
          EOF
            
            # Substituir variáveis no JSON
            sed -i "s/\${{ env.APP_RUNNER_SERVICE_NAME }}/${{ env.APP_RUNNER_SERVICE_NAME }}/g" apprunner-config.json
            sed -i "s|\${{ github.server_url }}/\${{ github.repository }}|${{ github.server_url }}/${{ github.repository }}|g" apprunner-config.json
            
            # Criar serviço
            aws apprunner create-service --cli-input-json file://apprunner-config.json
            
            echo "deployment-type=create" >> $GITHUB_ENV
          fi
      
      - name: ⏳ Wait for deployment
        run: |
          echo "⏳ Waiting for deployment to complete..."
          
          SERVICE_ARN="arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}"
          
          # Aguardar até o serviço estar rodando
          for i in {1..30}; do
            STATUS=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query 'Service.Status' --output text)
            echo "🔄 Deployment status: $STATUS (attempt $i/30)"
            
            if [ "$STATUS" = "RUNNING" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "CREATE_FAILED" ] || [ "$STATUS" = "UPDATE_FAILED" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              exit 1
            fi
            
            sleep 30
          done
          
          if [ "$STATUS" != "RUNNING" ]; then
            echo "⏰ Deployment timeout - status: $STATUS"
            echo "🔍 Check AWS Console for details"
            exit 1
          fi
      
      - name: 🌐 Get service URL
        id: url
        run: |
          SERVICE_ARN="arn:aws:apprunner:${{ env.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:service/${{ env.APP_RUNNER_SERVICE_NAME }}"
          
          SERVICE_URL=$(aws apprunner describe-service --service-arn "$SERVICE_ARN" --query 'Service.ServiceUrl' --output text)
          
          echo "🌐 Service URL: https://$SERVICE_URL"
          echo "url=https://$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "SERVICE_URL=https://$SERVICE_URL" >> $GITHUB_ENV
      
      - name: 🧪 Test deployed application
        run: |
          echo "🧪 Testing deployed application..."
          
          # Aguardar um pouco para o serviço estar totalmente disponível
          sleep 30
          
          # Testar health check
          if curl -f "${{ env.SERVICE_URL }}/api/health" --max-time 30; then
            echo "✅ Health check passed!"
          else
            echo "⚠️ Health check failed, but deployment completed"
          fi
          
          # Testar endpoint de info
          if curl -f "${{ env.SERVICE_URL }}/api/info" --max-time 30; then
            echo "✅ Info endpoint working!"
          else
            echo "⚠️ Info endpoint issue, but deployment completed"
          fi
      
      - name: 📊 Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Detail | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🌐 **Service URL** | [${{ env.SERVICE_URL }}](${{ env.SERVICE_URL }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 **Service Name** | ${{ env.APP_RUNNER_SERVICE_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🌍 **AWS Region** | ${{ env.AWS_REGION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📅 **Deployed At** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔄 **Deployment Type** | ${{ env.deployment-type }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Quick Tests:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 [Health Check](${{ env.SERVICE_URL }}/api/health)" >> $GITHUB_STEP_SUMMARY
          echo "- 📋 [Service Info](${{ env.SERVICE_URL }}/api/info)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [API Docs](${{ env.SERVICE_URL }}/api/pedidos)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 **Your microservice is now live!**" >> $GITHUB_STEP_SUMMARY

  # Job: Notificar resultado
  notify:
    name: 📢 Notify Deployment Result
    runs-on: ubuntu-latest
    needs: [check-deploy, deploy]
    if: always()
    
    steps:
      - name: 📢 Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Service is now available at the provided URL"
          echo "📊 Check the deployment summary for details"
      
      - name: 📢 Deployment Skipped
        if: needs.check-deploy.outputs.should-deploy == 'false'
        run: |
          echo "⏭️ Deployment skipped"
          echo "🔍 Reason: Quality gate did not pass or conditions not met"
          echo "💡 Ensure your PR passes all quality checks before merging"
      
      - name: 📢 Deployment Failed
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed"
          echo "🔍 Check the deployment logs for details"
          echo "💡 Common issues: AWS credentials, service configuration, or application errors"
          exit 1

